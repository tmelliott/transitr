#!/bin/bash

## config
AUTOUPDATE=true
Rcmd="$(which R) --slave"

## script directory
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPTDIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
PKGDIR="$( cd $SCRIPTDIR && cd ../../ && pwd )"

## check for updates
# ( cd $PKGDIR && git status )

UPSTREAM=${1:-'@{u}'}
LOCAL=$(cd $PKGDIR && git rev-parse @)
REMOTE=$(cd $PKGDIR && git rev-parse "$UPSTREAM")
BASE=$(cd $PKGDIR && git merge-base @ "$UPSTREAM")

if [ $LOCAL = $REMOTE ]; then
    echo "Up-to-date"
elif [ $LOCAL = $BASE ]; then
    echo "Updating ..."
    $(cd $PKGDIR && git pull)
    $(cd $PKGDIR && make clean install)
else
    echo "You've doen something ... please fix!"
    exit 1
fi

## Up-to-date ... launch program
CDIR=$( pwd )
cd $PKGDIR

## check for existing one
if [ -f .running_pid ]; then
    echo "Killing currently running process ... "
    typeset -i PID=$( cat .running_pid )
    kill -s TERM $PID 2>/dev/null
    while kill -0 $PID 2>/dev/null; do sleep 1; done
    rm .running_pid
fi

echo "Starting ... "

$Rcmd -f scripts/run_model.R > run.log 2>&1 & 
echo $! >> .running_pid

cd $CDIR
exit 0
